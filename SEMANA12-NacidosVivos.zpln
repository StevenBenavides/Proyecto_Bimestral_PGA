{"paragraphs":[{"text":"val dfNacidos =spark \r\n\t.read\r\n\t.option(\"header\", true)\r\n\t.option(\"delimiter\", \";\")\r\n\t.option(\"inferSchema\", true)\r\n    .csv(\"/workspace/Demo-s10/Datos de nacidos vivos Original/Datos_abiertos_ENV_2023/ENV_2023.csv\")","user":"anonymous","dateUpdated":"2025-07-01T01:38:06+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"tableHide":false,"results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\u001b[1m\u001b[34mdfNacidos\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [prov_insc: string, cant_insc: string ... 45 more fields]\n"}]},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://10.0.5.2:4040/jobs/job?id=0"},{"jobUrl":"http://10.0.5.2:4040/jobs/job?id=1"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1750893240292_1441196624","id":"paragraph_1750893240292_1441196624","dateCreated":"2025-06-25T23:14:00+0000","dateStarted":"2025-07-01T01:37:38+0000","dateFinished":"2025-07-01T01:37:58+0000","status":"FINISHED","focus":false},{"user":"anonymous","progress":0,"config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1751333855509_1107093005","id":"paragraph_1751333855509_1107093005","dateCreated":"2025-07-01T01:37:35+0000","status":"FINISHED","text":"%md\r\n\r\n# 5.Transformaciones \r\n\r\nComo ya conocen existen al menos 3 columnas que contienen valores que pueden convertirse en fecha, aunque ahora mismo están almacenadas como cadenas de texto (String).\r\n\r\nPara realizar los cambios es necesario: a) conocer el formato (posición del día, mes y año) y b) usar el método withColumn para realizar los cambios.\r\n\r\nEl formato de la fecha es: Año/Mes/Día, ese formato se puede representar así: YYYY/MM/dd.","focus":false,"dateUpdated":"2025-07-01T01:38:08+0000","dateFinished":"2025-07-01T01:38:11+0000","dateStarted":"2025-07-01T01:38:08+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>5.Transformaciones</h1>\n<p>Como ya conocen existen al menos 3 columnas que contienen valores que pueden convertirse en fecha, aunque ahora mismo están almacenadas como cadenas de texto (String).</p>\n<p>Para realizar los cambios es necesario: a) conocer el formato (posición del día, mes y año) y b) usar el método withColumn para realizar los cambios.</p>\n<p>El formato de la fecha es: Año/Mes/Día, ese formato se puede representar así: YYYY/MM/dd.</p>\n\n</div>"}]}},{"user":"anonymous","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1751333846747_1509791235","id":"paragraph_1751333846747_1509791235","dateCreated":"2025-07-01T01:37:26+0000","status":"FINISHED","text":"val dfNacidosClean = dfNacidos.withColumn(\"fecha_insc_date\", to_date(col(\"fecha_insc\"), \"yyyy/MM/dd\"))","focus":false,"dateUpdated":"2025-07-01T01:39:26+0000","dateFinished":"2025-07-01T01:39:26+0000","dateStarted":"2025-07-01T01:39:26+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\u001b[1m\u001b[34mdfNacidosClean\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [prov_insc: string, cant_insc: string ... 46 more fields]\n"}]}},{"text":"%md \r\n# Taller en clase de análisis del dataframe\r\n\r\n0. Clasificar las columnas numericas las que se suponen que deben ser numericas\r\n1. Cómo obtener los valores distintos \r\n2. Agrupar y contar cuantis de los valores distintos existen ","user":"anonymous","dateUpdated":"2025-07-01T01:39:28+0000","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1750893398480_9719258","id":"paragraph_1750893398480_9719258","dateCreated":"2025-06-25T23:16:38+0000","status":"FINISHED","focus":false,"dateFinished":"2025-07-01T01:39:28+0000","dateStarted":"2025-07-01T01:39:28+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Taller en clase de análisis del dataframe</h1>\n<ol start=\"0\">\n<li>Clasificar las columnas numericas las que se suponen que deben ser numericas</li>\n<li>Cómo obtener los valores distintos</li>\n<li>Agrupar y contar cuantis de los valores distintos existen</li>\n</ol>\n\n</div>"}]}},{"text":"dfNacidosClean.printSchema","user":"anonymous","dateUpdated":"2025-07-01T01:39:33+0000","progress":0,"config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"colWidth":12,"fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1751333761870_1277516050","id":"paragraph_1751333761870_1277516050","dateCreated":"2025-07-01T01:36:01+0000","status":"FINISHED","focus":false,"dateFinished":"2025-07-01T01:39:30+0000","dateStarted":"2025-07-01T01:39:30+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- prov_insc: string (nullable = true)\n |-- cant_insc: string (nullable = true)\n |-- parr_insc: string (nullable = true)\n |-- fecha_insc: string (nullable = true)\n |-- anio_insc: string (nullable = true)\n |-- mes_insc: string (nullable = true)\n |-- dia_insc: string (nullable = true)\n |-- sexo: string (nullable = true)\n |-- fecha_nac: string (nullable = true)\n |-- anio_nac: integer (nullable = true)\n |-- mes_nac: string (nullable = true)\n |-- dia_nac: integer (nullable = true)\n |-- talla: string (nullable = true)\n |-- peso: string (nullable = true)\n |-- sem_gest: string (nullable = true)\n |-- tipo_part: string (nullable = true)\n |-- lugar_ocur: string (nullable = true)\n |-- apgar1: string (nullable = true)\n |-- apgar5: string (nullable = true)\n |-- p_emb: string (nullable = true)\n |-- prov_nac: string (nullable = true)\n |-- cant_nac: string (nullable = true)\n |-- parr_nac: string (nullable = true)\n |-- area_nac: string (nullable = true)\n |-- asis_por: string (nullable = true)\n |-- nac_mad: string (nullable = true)\n |-- cod_pais: string (nullable = true)\n |-- fecha_mad: string (nullable = true)\n |-- anio_mad: string (nullable = true)\n |-- mes_mad: string (nullable = true)\n |-- dia_mad: string (nullable = true)\n |-- edad_mad: string (nullable = true)\n |-- con_pren: string (nullable = true)\n |-- num_emb: string (nullable = true)\n |-- num_par: string (nullable = true)\n |-- hij_viv: integer (nullable = true)\n |-- hij_vivm: string (nullable = true)\n |-- hij_nacm: string (nullable = true)\n |-- etnia: string (nullable = true)\n |-- est_civil: string (nullable = true)\n |-- niv_inst: string (nullable = true)\n |-- sabe_leer: string (nullable = true)\n |-- prov_res: string (nullable = true)\n |-- cant_res: string (nullable = true)\n |-- parr_res: string (nullable = true)\n |-- area_res: string (nullable = true)\n |-- residente: string (nullable = true)\n |-- fecha_insc_date: date (nullable = true)\n\n"}]}},{"user":"anonymous","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://10.0.5.2:4040/jobs/job?id=2"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1751333765741_1567418102","id":"paragraph_1751333765741_1567418102","dateCreated":"2025-07-01T01:36:05+0000","status":"FINISHED","text":"dfNacidosClean\r\n    .select(\"apgar1\",\"apgar5\", \"edad_mad\", \"talla\",\"peso\", \"sem_gest\",\"con_pren\", \"num_emb\", \"num_par\", \"hij_vivm\", \"hij_nacm\").show","focus":false,"dateUpdated":"2025-07-01T01:39:35+0000","dateFinished":"2025-07-01T01:39:36+0000","dateStarted":"2025-07-01T01:39:35+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------------+---------------+--------+---------------+---------------+---------------+---------------+-------+-------+---------------+---------------+\n|         apgar1|         apgar5|edad_mad|          talla|           peso|       sem_gest|       con_pren|num_emb|num_par|       hij_vivm|       hij_nacm|\n+---------------+---------------+--------+---------------+---------------+---------------+---------------+-------+-------+---------------+---------------+\n|              8|              9|      14|             49|           2600|             40|              8|      1|      1|Sin información|Sin información|\n|Sin información|Sin información|      12|Sin información|Sin información|Sin información|              0|      1|      1|              0|              0|\n|Sin información|Sin información|      13|Sin información|Sin información|Sin información|              0|      2|      2|              0|              0|\n|             10|             10|      12|             38|           3808|             40|             10|      1|      1|              0|              0|\n|Sin información|Sin información|      13|Sin información|Sin información|Sin información|              0|      1|      1|              0|              0|\n|Sin información|Sin información|      14|Sin información|Sin información|Sin información|              0|      1|      1|              0|              0|\n|              8|              9|      14|             52|           3000|             38|              3|      1|      1|              0|              0|\n|              8|              9|      14|             48|           2799|             40|Sin información|      1|      1|              0|              0|\n|Sin información|Sin información|      14|Sin información|Sin información|Sin información|Sin información|      1|      1|              0|              0|\n|Sin información|Sin información|      11|Sin información|Sin información|Sin información|              0|      1|      1|              0|              0|\n|Sin información|Sin información|      12|Sin información|Sin información|Sin información|              0|      2|      2|              0|              0|\n|Sin información|Sin información|      14|Sin información|Sin información|Sin información|              0|      1|      1|              0|              0|\n|              6|              8|      14|             48|           2600|             40|              1|      3|      3|              0|              0|\n|Sin información|Sin información|      14|Sin información|Sin información|Sin información|              0|      1|      1|              0|              0|\n|Sin información|Sin información|      14|Sin información|Sin información|Sin información|              3|      1|      1|              0|              0|\n|              8|              9|      14|             48|           3350|             38|              3|      1|      1|              0|              0|\n|              8|              9|      13|             50|           2900|             41|              2|      1|      1|              0|              0|\n|              9|             10|      14|             52|           2880|             39|              7|      1|      1|              0|              0|\n|Sin información|Sin información|      14|Sin información|Sin información|Sin información|Sin información|      3|      3|              1|Sin información|\n|              8|              9|      13|             48|           3050|             39|              3|      1|      1|              0|              0|\n+---------------+---------------+--------+---------------+---------------+---------------+---------------+-------+-------+---------------+---------------+\nonly showing top 20 rows\n\n"}]}},{"user":"anonymous","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://10.0.5.2:4040/jobs/job?id=5"},{"jobUrl":"http://10.0.5.2:4040/jobs/job?id=6"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1751333782695_438607093","id":"paragraph_1751333782695_438607093","dateCreated":"2025-07-01T01:36:22+0000","status":"FINISHED","text":"dfNacidosClean\r\n.groupBy(\"peso\").count().orderBy(\"peso\").show()\r\n","focus":false,"dateUpdated":"2025-07-01T01:40:39+0000","dateFinished":"2025-07-01T01:40:41+0000","dateStarted":"2025-07-01T01:40:39+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----+-----+\n|peso|count|\n+----+-----+\n|1000|   47|\n|1005|    2|\n|1006|    1|\n|1008|    1|\n|1010|   13|\n|1015|    7|\n|1018|    1|\n|1020|   15|\n|1025|    4|\n|1026|    1|\n|1030|   10|\n|1032|    2|\n|1035|    8|\n|1038|    1|\n|1040|   13|\n|1045|    4|\n|1047|    1|\n|1048|    2|\n|1049|    1|\n|1050|   22|\n+----+-----+\nonly showing top 20 rows\n\n"}]}},{"user":"anonymous","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://10.0.5.2:4040/jobs/job?id=7"},{"jobUrl":"http://10.0.5.2:4040/jobs/job?id=8"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1751333796122_682212488","id":"paragraph_1751333796122_682212488","dateCreated":"2025-07-01T01:36:36+0000","status":"FINISHED","text":"dfNacidosClean\r\n.groupBy(\"talla\").count().orderBy(\"talla\").show()","focus":false,"dateUpdated":"2025-07-01T01:40:43+0000","dateFinished":"2025-07-01T01:40:44+0000","dateStarted":"2025-07-01T01:40:43+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------------+-----+\n|          talla|count|\n+---------------+-----+\n|             38| 1827|\n|             39|  584|\n|             40| 1090|\n|             41| 1117|\n|             42| 1669|\n|             43| 2441|\n|             44| 4130|\n|             45| 8337|\n|             46|15009|\n|             47|26371|\n|             48|38292|\n|             49|42690|\n|             50|44547|\n|             51|23937|\n|             52|19596|\n|             53|  497|\n|             54|  206|\n|             55|  183|\n|Sin información| 8772|\n+---------------+-----+\n\n"}]}},{"user":"anonymous","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"apps":[],"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":[{"jobUrl":"http://10.0.5.2:4040/jobs/job?id=9"},{"jobUrl":"http://10.0.5.2:4040/jobs/job?id=10"}],"interpreterSettingId":"spark"}},"progressUpdateIntervalMs":500,"jobName":"paragraph_1751333807259_750186003","id":"paragraph_1751333807259_750186003","dateCreated":"2025-07-01T01:36:47+0000","status":"FINISHED","text":"import org.apache.spark.sql.types._\r\nimport org.apache.spark.sql.functions._\r\n\r\nval columnasEvaluar = Seq(\"apgar1\",\"apgar5\", \"edad_mad\", \"talla\",\"peso\", \"sem_gest\",\"con_pren\", \"num_emb\", \"num_par\", \"hij_vivm\", \"hij_nacm\")\r\n\r\n\r\nval statsExprs = columnasEvaluar.flatMap { colName =>\r\n  Seq(\r\n    count(when(col(colName).cast(\"int\").isNotNull, 1)).alias(s\"${colName}_columnas_validas\"),\r\n    count(when(col(colName).cast(\"int\").isNull, 1)).alias(s\"${colName}_columnas_invalidas\")\r\n  )\r\n}\r\n\r\n\r\nval dfStats = dfNacidosClean.select(statsExprs: _*)\r\ndfStats.show()","focus":false,"dateUpdated":"2025-07-01T01:40:46+0000","dateFinished":"2025-07-01T01:40:48+0000","dateStarted":"2025-07-01T01:40:46+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","datan|apgar1_columnas_validas|apgar1_columnas_invalidas|apgar5_columnas_validas|apgar5_columnas_invalidas|edad_mad_columnas_validas|edad_mad_columnas_invalidas|talla_columnas_validas|talla_columnas_invalidas|peso_columnas_validas|peso_columnas_invalidas|sem_gest_columnas_validas|sem_gest_columnas_invalidas|con_pren_columnas_validas|con_pren_columnas_invalidas|num_emb_columnas_validas|num_emb_columnas_invalidas|num_par_columnas_validas|num_par_columnas_invalidas|hij_vivm_columnas_validas|hij_vivm_columnas_invalidas|hij_nacm_columnas_validas|hij_nacm_columnas_invalidas|\nn|                 231824|                     9471|                 231751|                     9544|                   239795|                       1500|                232523|                    8772|               232608|                   8687|                   232283|                       9012|                   234044|                       7251|                  234602|                      6693|                  234602|                      6693|                   234150|                       7145|                   234200|                       7095|\n+-----------------------+-------------------------+-----------------------+-------------------------+-------------------------+---------------------------+----------------------+------------------------+---------------------+-----------------------+-------------------------+---------------------------+-------------------------+---------------------------+------------------------+--------------------------+------------------------+--------------------------+-------------------------+---------------------------+-------------------------+---------------------------+\n\nimport org.apache.spark.sql.types._\nimport org.apache.spark.sql.functions._\n\u001b[1m\u001b[34mcolumnasEvaluar\u001b[0m: \u001b[1m\u001b[32mSeq[String]\u001b[0m = List(apgar1, apgar5, edad_mad, talla, peso, sem_gest, con_pren, num_emb, num_par, hij_vivm, hij_nacm)\n\u001b[1m\u001b[34mstatsExprs\u001b[0m: \u001b[1m\u001b[32mSeq[org.apache.spark.sql.Column]\u001b[0m = List(count(CASE WHEN (CAST(apgar1 AS INT) IS NOT NULL) THEN 1 END) AS apgar1_columnas_validas, count(CASE WHEN (CAST(apgar1 AS INT) IS NULL) THEN 1 END) AS apgar1_columnas_invalidas, count(CASE WHEN (CAST(apgar5 AS INT) IS NOT NULL) THEN 1 END) AS apgar5_columnas_validas, count(CASE WHEN (CAST(apgar5 AS INT) IS NULL) THEN 1 END) AS apgar5_columnas_invalidas, count(CASE WHEN (CAST(edad_mad AS INT) IS NOT NULL) THEN 1 END) AS edad_mad_columnas_validas, count(CASE WHEN (CAST(edad_mad AS ...\n"}]}},{"user":"anonymous","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1751333799425_95956301","id":"paragraph_1751333799425_95956301","dateCreated":"2025-07-01T01:36:39+0000","status":"READY","text":"","focus":false,"dateUpdated":"2025-07-01T01:36:51+0000","results":{}}],"name":"SEMANA12-NacidosVivos","id":"2KXRFK67D","defaultInterpreterGroup":"spark","version":"0.12.0","noteParams":{},"noteForms":{},"angularObjects":{},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{},"path":"/SEMANA12-NacidosVivos"}